{"id":"91e82bfe-e3a7-436a-9029-6d576da8738e","zed":"context","version":"0.4.0","text":"\n\n\n bool CheckCollision(Rectangle& Rect1, Rectangle& Rect2) {\n      if (CheckCollisionRecs(\n          Rectangle{Rect1.x, Rect1.y, Rect1.width, Rect1.height},\n          Rectangle{Rect2.x, Rect2.y, Rect2.width, Rect2.height})) {\n\n          Rect1.x = Rect1.prevX;\n          Rect1.y = Rect1.prevY;\n          return true;\n      }\n      return false;\n  }\nthis function does not recognise prevX and prevY since its not stored in the rectangle parameters but i still need it for the rec to stop when colliding how would i fix this \nYou have a few options to handle this:\n\n1. Create a custom Rectangle class that extends the built-in Rectangle to include prevX and prevY:\n\n```cpp\nclass ExtendedRectangle : public Rectangle {\npublic:\n    float prevX;\n    float prevY;\n    \n    ExtendedRectangle(float x, float y, float width, float height) : Rectangle{x, y, width, height} {\n        prevX = x;\n        prevY = y;\n    }\n};\n\nbool CheckCollision(ExtendedRectangle& Rect1, ExtendedRectangle& Rect2) {\n    if (CheckCollisionRecs(\n        Rectangle{Rect1.x, Rect1.y, Rect1.width, Rect1.height},\n        Rectangle{Rect2.x, Rect2.y, Rect2.width, Rect2.height})) {\n        \n        Rect1.x = Rect1.prevX;\n        Rect1.y = Rect1.prevY;\n        return true;\n    }\n    return false;\n}\n```\n\n2. Create a separate structure to track position history:\n\n```cpp\nstruct Position {\n    Rectangle rect;\n    float prevX;\n    float prevY;\n};\n\nbool CheckCollision(Position& Pos1, Position& Pos2) {\n    if (CheckCollisionRecs(Pos1.rect, Pos2.rect)) {\n        Pos1.rect.x = Pos1.prevX;\n        Pos1.rect.y = Pos1.prevY;\n        return true;\n    }\n    return false;\n}\n```\n\n3. Store the previous position before moving the rectangle and pass it to the function:\n\n```cpp\nbool CheckCollision(Rectangle& Rect1, Rectangle& Rect2, float prevX, float prevY) {\n    if (CheckCollisionRecs(Rect1, Rect2)) {\n        Rect1.x = prevX;\n        Rect1.y = prevY;\n        return true;\n    }\n    return false;\n}\n```\n\nUsage example for option 1:\n```cpp\nExtendedRectangle player(100, 100, 50, 50);\nExtendedRectangle wall(200, 200, 100, 20);\n\n// Before moving the player\nplayer.prevX = player.x;\nplayer.prevY = player.y;\n\n// Move player\nplayer.x += moveX;\nplayer.y += moveY;\n\n// Check collision\nCheckCollision(player, wall);\n```\n\nI would recommend using option 1 (ExtendedRectangle) as it keeps all the related data together and is the most organized solution. Just remember to update prevX and prevY before moving the rectangle.\nwouldnt this also be a solution ","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":119}}},{"id":{"replica_id":0,"value":40},"start":524,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":120}}},{"id":{"replica_id":0,"value":41},"start":2473,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":121}}}],"summary":"Rectangle Collision Previous Position Issue","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}